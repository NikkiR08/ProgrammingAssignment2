q()
install.packages("swirl")
library(swirl)
swirl()
options(repos= c(CRAN = "http://cran.rstudio.com"))
install.packages("swirl")
library(swirl)
swirl()
5+7
x<- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
1s()
ls()
x <-9
ls()
dir()
lsit.files
?list.files
args()
args(list.files())
args(list.files)
old.dir <- "C:/Users/Nichola/Documents"
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.creat("mytest.R")
file.create("mytest.R")
list.files
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R, "mytest2.R"")
file.rename("mytest.R, "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
dir.create
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("C:/Users/Nichola/Documents")
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(1, 10, by=0.5)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length("my_seq")
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
getwd()
library(swirl)
ls()
rm(list=ls())
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- c(if num_vect<1)
tf <- ("num_vect"<1)
info()
tf <- num_vect <1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse=" ")
paste(my_char, collapse=" ")
c(my_char, "Nichola")
my_name <- c(my_char, "Nichola")
my_name
paste(my_name, collapse=" ")
paste("Hello", "World!", sep=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep ="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(1,3,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar =2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
info()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <-  data.frame(patients, my_matrix)
my_data
class(my_data)
?data.frame
data.frame (my_data, "patient")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- Cnames
colnames(my_data) <- "cnames"
colnames(my_data) <- cnames
my_data
True == True
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6 <7
10 <= 10
5 != 7
5 != 7
5 !== 7
!5==7
FALSE & FALSE
c(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE  | c(TRUE, FALSE, FALSE)
TRUE  | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5 ==6, !FALSE)
ints <- sample(10)
ints
ints >5
which(ints>7)
any(ints<0)
all(ints>0)
sys.date()
Sys.Date
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder (divisor =11, number = 5)
remainder(4, div=2)
args(remainder)
submit()
submit()
submit()
submit()
?stderr
evaluate(sd, c(1,4, 3.6, 7.9, 8.8))
evaluate(sd(), c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1,4, 3.6, 7.9, 8.8))
evaluate(sd, c(1,4, 3.6, 7.9, 8.8))
evaluate(sd., c(1,4, 3.6, 7.9, 8.8))
evaluate(sd, c(1,4, 3.6, 7.9, 8.8))
evaluate(sd , c(1,4, 3.6, 7.9, 8.8))
evaluate(sd , c(1.4, 3.6, 7.9, 8.8))
evaulate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
x <- c(8,4,0)
evaluate(anonymous, c(8,4,0))
anonymous
evaluate(function(x){x+1}, c(8,4,0))
evaluate(function(x){x+1}, x
cfgdg
evaluate(function(x){x+1}, x)
evaluate(function(x){x+1},x)
evaluate(function(x){x+1},x)
evaluate(function(x){x+1},x)
evaluate(function(x){x+1},x)
info()
skip()
evaluate(function(3), c(8,4,0))
evaluate(function(x[3]), c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[=lenth(x)]}, c(8,4,0))
evaluate(function(x){x[lenth(x)]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telgram(sum(c(1,2,3)))
telgram(hello)
telegram(hello)
telegram(5+6)
submit()
skip()
submit()
submit()
submit()
submit()
skip()
submit()
submit()
submit()
mad_libs(newyork, funny, ship)
mad_libs("newyork","funny","ship")
submit()
submit()
submit()
'I' %p% 'love' %p% 'R'
"I" %p% "love" %p% "R"
'I' %p% 'love' %p% 'R!'
setwd("C:/Users/Nichola/Desktop/coursera/assignment2")
setwd("C:/Users/Nichola/ProgrammingAssignment2")
?matrix
